/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED!
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/backlight.h>

#define HYP(key) LS(LC(LA(LG(key))))
#define HYPER LS(LC(LA(LGUI)))

/ {
  behaviors {
    #include "macros.dtsi"

    hm: homerow_mods {
        compatible = "zmk,behavior-hold-tap";
        label = "HOMEROW_MODS";
        #binding-cells = <2>;
        tapping-term-ms = <200>;
        quick_tap_ms = <175>;
        flavor = "tap-preferred";
        bindings = <&kp>, <&kp>;
    };

    alt_tabber: alt_tabber {
        compatible = "zmk,behavior-tri-state";
        label = "alt_tabber";
        #binding-cells = <0>;
        bindings = <&kt LALT>, <&kp TAB>, <&kt LALT>;
        ignored-key-positions = <29>, <46>;
    };

    cmd_tabber: cmd_tabber {
        compatible = "zmk,behavior-tri-state";
        label = "cmd_tabber";
        #binding-cells = <0>;
        bindings = <&kt LCMD>, <&kp TAB>, <&kt LCMD>;
        ignored-key-positions = <29>, <46>;
    };
  };

    keymap {
        compatible = "zmk,keymap";


        default_layer {
            bindings = <
 &kp EQUAL  &kp N1  &kp N2  &kp N3     &kp N4  &kp N5               &tog 1                                                                                                  &mo 3  &kp N6  &kp N7     &kp N8    &kp N9    &kp N0  &kp MINUS
   &kp TAB   &kp Q   &kp W   &kp E      &kp R   &kp T                &none                                                                                         &kp HYP(SPACE)   &kp Y   &kp U      &kp I     &kp O     &kp P   &kp BSLH
   &kp ESC   &kp A   &kp S   &kp D      &kp F   &kp G               &kp F1          &mo 4  &kp LEFT_COMMAND                  &kp RIGHT_CONTROL  &kp RIGHT_COMMAND   &kp RG(SPACE)   &kp H   &kp J      &kp K     &kp L  &kp SEMI    &kp SQT
 &kp LSHFT   &kp Z   &kp X   &kp C      &kp V   &kp B                                             &kp LCTRL                          &kp PG_UP                                      &kp N   &kp M  &kp COMMA   &kp DOT  &kp FSLH  &kp RSHFT
     &mo 2   &none   &none   &none  &kp GRAVE                    &kp SPACE  &kp BACKSPACE      &kp LEFT_ALT                          &kp PG_DN         &kp DELETE       &kp ENTER           &none   &kp LBKT  &kp RBKT     &none      &mo 2
            >;
        };

        layer_keypad {
            bindings = <
 &kp EQUAL     &kp N1    &kp N2    &kp N3     &kp N4  &kp N5              &trans                                                                 &mo 3  &kp N6  &kp KP_NUM  &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY  &kp MINUS
   &kp TAB      &kp Q     &kp W     &kp E      &kp R   &kp T               &none                                                                 &none   &kp Y   &kp KP_N7     &kp KP_N8      &kp KP_N9     &kp KP_MINUS   &kp BSLH
   &kp ESC      &kp A     &kp S     &kp D      &kp F   &kp G               &none  &kp LCTRL  &kp LALT                   &kp LGUI  &kp RCTRL      &none   &kp H   &kp KP_N4     &kp KP_N5      &kp KP_N6      &kp KP_PLUS    &kp SQT
 &kp LSHFT      &kp Z     &kp X     &kp C      &kp V   &kp B                                 &kp HOME                  &kp PG_UP                         &kp N   &kp KP_N1     &kp KP_N2      &kp KP_N3     &kp KP_ENTER  &kp RSHFT
     &mo 2  &kp GRAVE  &kp CAPS  &kp LEFT  &kp RIGHT                    &kp BSPC    &kp DEL   &kp END                  &kp PG_DN  &kp ENTER  &kp KP_N0              &kp UP      &kp DOWN     &kp KP_DOT         &kp RBKT      &mo 2
            >;
        };

        layer_fn {
            bindings = <
 &trans  &kp F1      &kp F2      &kp F3      &kp F4  &kp F5            &tog 1                                                             &mo 3        &kp F6      &kp F7            &kp F8      &kp F9               &kp F10  &kp F11
 &trans  &trans  &kp HYP(W)  &kp HYP(E)  &kp HYP(R)  &trans             &none                                                             &none  &kp C_VOL_UP      &trans        &kp C_STOP      &trans  &kp C_BRIGHTNESS_INC  &kp F12
 &trans  &trans  &kp HYP(S)  &kp HYP(D)  &kp HYP(F)  &trans             &none  &trans  &trans                  &trans  &trans             &none  &kp C_VOL_DN  &kp C_PREV  &kp C_PLAY_PAUSE  &kp C_NEXT  &kp C_BRIGHTNESS_DEC   &trans
 &trans  &trans  &kp HYP(X)  &kp HYP(C)  &kp HYP(V)  &trans                            &trans                  &trans                              &kp C_MUTE      &trans            &trans      &trans                &trans   &trans
 &trans  &trans      &trans      &trans      &trans                    &trans  &trans  &trans                  &trans  &trans  &kp C_PLAY_PAUSE                    &trans            &trans      &trans                &trans   &trans
            >;
        };

        layer_mod {
            bindings = <
  &none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                  &none                                                                          &trans   &none       &none       &none   &none   &none   &none
  &none         &none         &none         &none         &none         &none            &bootloader                                                                     &bootloader   &none       &none       &none   &none   &none   &none
  &none         &none         &none         &none         &none         &none                  &none   &none   &none                  &bt BT_CLR       &none  &rgb_ug RGB_MEFS_CMD 5   &none       &none       &none   &none   &none   &none
  &none         &none         &none         &none         &none         &none                                  &none                       &none                                       &none       &none       &none   &none   &none   &none
  &none         &none         &none         &none         &none                                &none   &none   &none                       &none  &bl BL_TOG         &rgb_ug RGB_TOG          &bl BL_INC  &bl BL_DEC   &none   &none   &none
            >;
        };

        layer_Move {
            bindings = <
 &trans          &trans        &trans    &trans         &trans       &trans               &trans                                                  &trans    &trans    &trans  &trans     &trans  &trans  &trans
 &trans           &none  &kp LG(LEFT)    &kp UP  &kp LG(RIGHT)  &alt_tabber            &kp PG_UP                                                  &trans    &trans    &trans  &trans     &trans  &trans  &trans
 &trans  &kp LEFT_SHIFT      &kp LEFT  &kp DOWN      &kp RIGHT  &cmd_tabber            &kp PG_DN  &trans  &trans                  &trans  &trans  &trans  &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &trans  &trans
 &trans          &trans  &kp LC(LEFT)    &trans  &kp LC(RIGHT)       &trans                               &trans                  &trans                    &trans    &trans  &trans     &trans  &trans  &trans
 &trans          &trans        &trans    &trans         &trans                            &trans  &trans  &trans                  &trans  &trans  &trans              &trans  &trans     &trans  &trans  &trans
            >;
        };

    };
};
